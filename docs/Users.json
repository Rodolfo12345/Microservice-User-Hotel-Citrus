{
  "swagger": "2.0",
  "info": {
    "title": "User Microservice",
    "description": "API for managing users",
    "version": "1.0.0"
  },
  "basePath": "/",
  "paths": {
    "/users": {
      "get": {
        "summary": "Get all users",
        "description": "Retrieve a paginated list of users with optional filters.",
        "parameters": [
          {
            "in": "query",
            "name": "status",
            "required": false,
            "type": "integer",
            "description": "Filter users by their status."
          },
          {
            "in": "query",
            "name": "name",
            "required": false,
            "type": "string",
            "description": "Filter users by their name."
          },
          {
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer",
            "default": 1,
            "description": "Page number of the users to retrieve."
          },
          {
            "in": "query",
            "name": "pageSize",
            "required": false,
            "type": "integer",
            "default": 10,
            "description": "Number of users to retrieve per page."
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated list of users.",
            "schema": {
              "type": "object",
              "properties": {
                "currentPage": {
                  "type": "integer"
                },
                "totalPages": {
                  "type": "integer"
                },
                "totalItems": {
                  "type": "integer"
                },
                "users": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/User"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters provided."
          }
        }
      },
      "post": {
        "summary": "Create a new user",
        "description": "Add a new user to the system.",
        "parameters": [
          {
            "in": "body",
            "name": "user",
            "description": "User object to be added",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NewUser"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "User created successfully."
          },
          "400": {
            "description": "Invalid request body."
          }
        }
      }
    },
    "/users/{userId}": {
      "put": {
        "summary": "Update user",
        "description": "Update an existing user's information.",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "integer",
            "description": "ID of the user to update."
          },
          {
            "in": "body",
            "name": "user",
            "description": "User object with updated fields.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User updated successfully."
          },
          "400": {
            "description": "Invalid request."
          },
          "404": {
            "description": "User not found."
          }
        }
      },
      "delete": {
        "summary": "Delete user",
        "description": "Remove a user from the system.",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "integer",
            "description": "ID of the user to delete."
          }
        ],
        "responses": {
          "200": {
            "description": "User deleted successfully."
          },
          "400": {
            "description": "Invalid request."
          },
          "404": {
            "description": "User not found."
          }
        }
      }
    }
  },
  "definitions": {
    "User": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "The unique identifier for the user."
        },
        "first_name": {
          "type": "string",
          "description": "The first name of the user."
        },
        "last_name": {
          "type": "string",
          "description": "The last name of the user."
        },
        "email": {
          "type": "string",
          "format": "email",
          "description": "The email address of the user."
        },
        "phone": {
          "type": "string",
          "description": "The phone number of the user."
        },
        "status": {
          "type": "integer",
          "description": "The status of the user."
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "The timestamp when the user was created."
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "The timestamp when the user was last updated."
        }
      }
    }
  }
  
}
